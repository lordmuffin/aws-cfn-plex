{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "3rd party git integration with CodePipeline",
  "Metadata": {
    "LICENSE": "Copyright 2016 Amazon Web Services, Inc. or its affiliates. All Rights Reserved. This file is licensed to you under the AWS Customer Agreement (the \"License\"). You may not use this file except in compliance with the License. A copy of the License is located at http://aws.amazon.com/agreement/ . This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions and limitations under the License.",
    "AWS::CloudFormation::Designer": {
      "f6392f68-27ae-4b06-8ef3-d330d48d327a": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 270,
          "y": 90
        },
        "z": 1,
        "embeds": []
      },
      "d2266b08-b849-43a2-b624-14269b390303": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 270,
          "y": 210
        },
        "z": 1,
        "embeds": []
      },
      "0a2c7b20-986b-49e9-88bc-b21b128f4f50": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 60,
          "y": 300
        },
        "z": 1,
        "embeds": [],
        "isrelatedto": [
          "d2266b08-b849-43a2-b624-14269b390303"
        ]
      },
      "cb479e37-281e-4996-9a28-096c03fb044b": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 390,
          "y": 90
        },
        "z": 1,
        "embeds": [],
        "isrelatedto": [
          "0a2c7b20-986b-49e9-88bc-b21b128f4f50"
        ]
      },
      "e8fdd629-6e9e-4c0b-97a2-5dba91b4da4f": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 390,
          "y": 210
        },
        "z": 1,
        "embeds": []
      },
      "a66e7731-bb2e-4275-85a3-e4415f0477cf": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 180,
          "y": 330
        },
        "z": 1,
        "embeds": [],
        "isrelatedto": [
          "d2266b08-b849-43a2-b624-14269b390303",
          "e8fdd629-6e9e-4c0b-97a2-5dba91b4da4f"
        ]
      },
      "80b222ad-0d81-49f1-a87c-4a1651fb2a81": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 300,
          "y": 330
        },
        "z": 1,
        "embeds": [],
        "isrelatedto": [
          "a66e7731-bb2e-4275-85a3-e4415f0477cf"
        ]
      },
      "77a5edf4-27d5-4fec-88bd-34d9d1665eec": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 420,
          "y": 330
        },
        "z": 1,
        "embeds": [],
        "isrelatedto": [
          "80b222ad-0d81-49f1-a87c-4a1651fb2a81",
          "cb479e37-281e-4996-9a28-096c03fb044b"
        ]
      },
      "13939fd2-4cbb-4eee-bc88-7d7008568b97": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 60,
          "y": 420
        },
        "z": 1,
        "embeds": [],
        "isrelatedto": [
          "e8fdd629-6e9e-4c0b-97a2-5dba91b4da4f",
          "d2266b08-b849-43a2-b624-14269b390303"
        ]
      },
      "752b82c8-16f2-4e19-b713-d2afbd689e0c": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 180,
          "y": 450
        },
        "z": 1,
        "embeds": [],
        "isrelatedto": [
          "13939fd2-4cbb-4eee-bc88-7d7008568b97"
        ]
      },
      "86d1a6b9-bd10-4805-bf96-36320a52c9e8": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 300,
          "y": 450
        },
        "z": 1,
        "embeds": [],
        "dependson": [
          "e8fdd629-6e9e-4c0b-97a2-5dba91b4da4f",
          "d2266b08-b849-43a2-b624-14269b390303"
        ],
        "isrelatedto": [
          "752b82c8-16f2-4e19-b713-d2afbd689e0c",
          "e8fdd629-6e9e-4c0b-97a2-5dba91b4da4f",
          "d2266b08-b849-43a2-b624-14269b390303"
        ]
      },
      "64687250-d695-45c8-b55e-7cd818a4c241": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 420,
          "y": 450
        },
        "z": 1,
        "embeds": [],
        "isrelatedto": [
          "e8fdd629-6e9e-4c0b-97a2-5dba91b4da4f"
        ]
      },
      "0e94c30e-6461-4453-b2bd-0f216ca49fb8": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 510,
          "y": 90
        },
        "z": 1,
        "embeds": [],
        "isrelatedto": [
          "64687250-d695-45c8-b55e-7cd818a4c241"
        ]
      },
      "f507f492-75cf-4362-95e2-4820be147bab": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 510,
          "y": 210
        },
        "z": 1,
        "embeds": [],
        "isrelatedto": [
          "0e94c30e-6461-4453-b2bd-0f216ca49fb8",
          "e8fdd629-6e9e-4c0b-97a2-5dba91b4da4f",
          "f6392f68-27ae-4b06-8ef3-d330d48d327a"
        ]
      },
      "ce3c7a69-b2b9-40c6-a077-85691720f6f3": {
        "size": {
          "width": 150,
          "height": 150
        },
        "position": {
          "x": 60,
          "y": 90
        },
        "z": 1,
        "embeds": [],
        "isrelatedto": [
          "77a5edf4-27d5-4fec-88bd-34d9d1665eec",
          "80b222ad-0d81-49f1-a87c-4a1651fb2a81",
          "e8fdd629-6e9e-4c0b-97a2-5dba91b4da4f",
          "f507f492-75cf-4362-95e2-4820be147bab",
          "cb479e37-281e-4996-9a28-096c03fb044b"
        ]
      },
      "cc28f7ca-e2fa-4b55-87dc-e21815d689b3": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 540,
          "y": 330
        },
        "z": 1,
        "embeds": [],
        "isassociatedwith": [
          "ce3c7a69-b2b9-40c6-a077-85691720f6f3"
        ]
      },
      "1267a60b-2fe8-4388-8ebe-cf1bf1b1ebfb": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 540,
          "y": 450
        },
        "z": 1,
        "embeds": [],
        "isassociatedwith": [
          "cc28f7ca-e2fa-4b55-87dc-e21815d689b3",
          "ce3c7a69-b2b9-40c6-a077-85691720f6f3"
        ],
        "isrelatedto": [
          "d2266b08-b849-43a2-b624-14269b390303"
        ]
      }
    }
  },
  "Parameters": {
    "OutputBucketName": {
      "Description": "OPTIONAL: Bucket Name where the zip file output should be placed, if left blank a bucket name will be automatically generated.",
      "Type": "String",
      "Default": ""
    },
    "AllowedIps": {
      "Description": "gitpull method only. Comma seperated list of IP CIDR blocks for source IP authentication. The BitBucket Cloud IP ranges are provided as defaults.",
      "Type": "String",
      "Default": "131.103.20.160/27,165.254.145.0/26,104.192.143.0/24"
    },
    "ApiSecret": {
      "Description": "gitpull method only. WebHook Secrets for use with GitHub Enterprise and GitLab. If a secret is matched IP range authentication is bypassed. Cannot contain: , \\ \"",
      "Type": "String",
      "Default": "",
      "NoEcho": "true"
    },
    "GitToken": {
      "NoEcho": "true",
      "Description": "zipdl method only. Personal access token, needed for GitHub Enterprise and GitLab",
      "Type": "String",
      "Default": "",
      "ConstraintDescription": "this token must be generated from the git server/provider"
    },
    "OauthKey": {
      "Description": "zipdl method only. OAuth2 Key needed for BitBucket",
      "Type": "String",
      "Default": "",
      "ConstraintDescription": "this key must be generated from the git server/provider"
    },
    "OauthSecret": {
      "NoEcho": "true",
      "Description": "zipdl method only. OAuth2 Secret needed for BitBucket",
      "Type": "String",
      "Default": "",
      "ConstraintDescription": "this secret must be generated from the git server/provider"
    }
  },
  "Mappings": {
    "LambdaBuckets": {
      "us-east-1": {
        "Name": "git-to-codepipeline-us-east-1"
      },
      "us-west-2": {
        "Name": "git-to-codepipeline-us-west-2"
      },
      "eu-west-1": {
        "Name": "git-to-codepipeline-eu-west-1"
      }
    }
  },
  "Conditions": {
    "UseAllowedIps": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "AllowedIps"
            },
            ""
          ]
        }
      ]
    },
    "UseApiSecret": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "ApiSecret"
            },
            ""
          ]
        }
      ]
    },
    "UseGitToken": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "GitToken"
            },
            ""
          ]
        }
      ]
    },
    "UseOauthKey": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "OauthKey"
            },
            ""
          ]
        }
      ]
    },
    "UseOauthSecret": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "OauthSecret"
            },
            ""
          ]
        }
      ]
    },
    "AutoGenOutputBucketName": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "OutputBucketName"
            },
            ""
          ]
        }
      ]
    }
  },
  "Resources": {
    "KeyBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "Tags": []
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "e8fdd629-6e9e-4c0b-97a2-5dba91b4da4f"
        }
      }
    },
    "OutputBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Fn::If": [
            "AutoGenOutputBucketName",
            {
              "Ref": "OutputBucketName"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "VersioningConfiguration": {
          "Status": "Enabled"
        },
        "Tags": []
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "d2266b08-b849-43a2-b624-14269b390303"
        }
      }
    },
    "KMSKey": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "git CodePipeline integration, bucket to store ssh keys",
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "Allow access for Key Administrators",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:iam::",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":root"
                      ]
                    ]
                  }
                ]
              },
              "Action": [
                "kms:Create*",
                "kms:Describe*",
                "kms:Enable*",
                "kms:List*",
                "kms:Put*",
                "kms:Update*",
                "kms:Revoke*",
                "kms:Disable*",
                "kms:Get*",
                "kms:Delete*",
                "kms:ScheduleKeyDeletion",
                "kms:CancelKeyDeletion"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Allow use of the key",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:iam::",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":root"
                      ]
                    ]
                  }
                ]
              },
              "Action": [
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:DescribeKey"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Allow attachment of persistent resources",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:iam::",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":root"
                      ]
                    ]
                  }
                ]
              },
              "Action": [
                "kms:CreateGrant",
                "kms:ListGrants",
                "kms:RevokeGrant"
              ],
              "Resource": "*",
              "Condition": {
                "Bool": {
                  "kms:GrantIsForAWSResource": true
                }
              }
            }
          ]
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "f6392f68-27ae-4b06-8ef3-d330d48d327a"
        }
      }
    },
    "CreateSSHKeyRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "git2cp-sshkeygen",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "KeyBucket"
                          },
                          "/crypto.zip"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "KeyBucket"
                          },
                          "/enc_key"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "kms:Encrypt"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    "arn:aws:logs:*:*:*"
                  ]
                }
              ]
            }
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "64687250-d695-45c8-b55e-7cd818a4c241"
        }
      }
    },
    "CreateSSHKeyLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "lambda_function.lambda_handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CreateSSHKeyRole",
            "Arn"
          ]
        },
        "Runtime": "python2.7",
        "Timeout": "300",
        "Code": {
          "S3Bucket": {
            "Fn::FindInMap": [
              "LambdaBuckets",
              {
                "Ref": "AWS::Region"
              },
              "Name"
            ]
          },
          "S3Key": "v1.0/CreateSSHKey.zip"
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "0e94c30e-6461-4453-b2bd-0f216ca49fb8"
        }
      }
    },
    "CreateSSHKey": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Version": "1.0",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CreateSSHKeyLambda",
            "Arn"
          ]
        },
        "KeyBucket": {
          "Ref": "KeyBucket"
        },
        "Region": {
          "Ref": "AWS::Region"
        },
        "KMSKey": {
          "Ref": "KMSKey"
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "f507f492-75cf-4362-95e2-4820be147bab"
        }
      }
    },
    "DeleteBucketContentsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "git2cp-deletebucketcontents",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:*"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "KeyBucket"
                          },
                          "/*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "OutputBucket"
                          },
                          "/*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "KeyBucket"
                          }
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "OutputBucket"
                          }
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    "arn:aws:logs:*:*:*"
                  ]
                }
              ]
            }
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "13939fd2-4cbb-4eee-bc88-7d7008568b97"
        }
      }
    },
    "DeleteBucketContentsLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "lambda_function.lambda_handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "DeleteBucketContentsRole",
            "Arn"
          ]
        },
        "Runtime": "python2.7",
        "Timeout": "300",
        "Code": {
          "S3Bucket": {
            "Fn::FindInMap": [
              "LambdaBuckets",
              {
                "Ref": "AWS::Region"
              },
              "Name"
            ]
          },
          "S3Key": "v1.0/DeleteBucketContents.zip"
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "752b82c8-16f2-4e19-b713-d2afbd689e0c"
        }
      }
    },
    "DeleteBucketContents": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Version": "1.0",
      "DependsOn": [
        "KeyBucket",
        "OutputBucket"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "DeleteBucketContentsLambda",
            "Arn"
          ]
        },
        "KeyBucket": {
          "Ref": "KeyBucket"
        },
        "OutputBucket": {
          "Ref": "OutputBucket"
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "86d1a6b9-bd10-4805-bf96-36320a52c9e8"
        }
      }
    },
    "GitPullRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "git2cp-gitpull",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "kms:Decrypt"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "OutputBucket"
                          }
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "OutputBucket"
                          },
                          "/*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "KeyBucket"
                          },
                          "/enc_key"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    "arn:aws:logs:*:*:*"
                  ]
                }
              ]
            }
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "a66e7731-bb2e-4275-85a3-e4415f0477cf"
        }
      }
    },
    "GitPullLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "lambda_function.lambda_handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "GitPullRole",
            "Arn"
          ]
        },
        "Runtime": "python2.7",
        "Timeout": "300",
        "Code": {
          "S3Bucket": {
            "Fn::FindInMap": [
              "LambdaBuckets",
              {
                "Ref": "AWS::Region"
              },
              "Name"
            ]
          },
          "S3Key": "v1.0/GitPullS3.zip"
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "80b222ad-0d81-49f1-a87c-4a1651fb2a81"
        }
      }
    },
    "ZipDlRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "git2cp-zipdl",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "OutputBucket"
                          }
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "OutputBucket"
                          },
                          "/*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    "arn:aws:logs:*:*:*"
                  ]
                }
              ]
            }
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "0a2c7b20-986b-49e9-88bc-b21b128f4f50"
        }
      }
    },
    "ZipDlLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "lambda_function.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "ZipDlRole",
            "Arn"
          ]
        },
        "Code": {
          "S3Bucket": {
            "Fn::FindInMap": [
              "LambdaBuckets",
              {
                "Ref": "AWS::Region"
              },
              "Name"
            ]
          },
          "S3Key": "v1.0/ZipDl.zip"
        },
        "Runtime": "python2.7",
        "MemorySize": 128,
        "Timeout": 30
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "cb479e37-281e-4996-9a28-096c03fb044b"
        }
      }
    },
    "WebHookRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
        ],
        "Policies": [
          {
            "PolicyName": "git2cp-webhook",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeAsync",
                    "lambda:InvokeFunction"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "GitPullLambda",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "ZipDlLambda",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "77a5edf4-27d5-4fec-88bd-34d9d1665eec"
        }
      }
    },
    "WebHookApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Body": {
          "swagger": "2.0",
          "info": {
            "version": "2016-07-26T07:34:38Z",
            "title": {
              "Fn::Join": [
                "",
                [
                  "G2CP-",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          },
          "schemes": [
            "https"
          ],
          "paths": {
            "/gitpull": {
              "post": {
                "consumes": [
                  "application/json"
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "type": "aws",
                  "credentials": {
                    "Fn::GetAtt": [
                      "WebHookRole",
                      "Arn"
                    ]
                  },
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "requestParameters": {
                    "integration.request.header.X-Amz-Invocation-Type": "'Event'"
                  },
                  "passthroughBehavior": "when_no_templates",
                  "httpMethod": "POST",
                  "uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path//2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GitPullLambda",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  },
                  "requestTemplates": {
                    "application/json": {
                      "Fn::Join": [
                        "",
                        [
                          "#set($allParams = $input.params())\n",
                          "{\n",
                          "\"body-json\" : $input.json('$'),\n",
                          "\"params\" : {\n",
                          "#foreach($type in $allParams.keySet())\n",
                          "    #set($params = $allParams.get($type))\n",
                          "\"$type\" : {\n",
                          "    #foreach($paramName in $params.keySet())\n",
                          "    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n",
                          "        #if($foreach.hasNext),#end\n",
                          "    #end\n",
                          "}\n",
                          "    #if($foreach.hasNext),#end\n",
                          "#end\n",
                          "},\n",
                          "\"stage-variables\" : {\n",
                          "#foreach($key in $stageVariables.keySet())\n",
                          "\"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n",
                          "    #if($foreach.hasNext),#end\n",
                          "#end\n",
                          "},\n",
                          "\"context\" : {\n",
                          "    \"account-id\" : \"$context.identity.accountId\",\n",
                          "    \"api-id\" : \"$context.apiId\",\n",
                          "    \"api-key\" : \"$context.identity.apiKey\",\n",
                          "    \"authorizer-principal-id\" : \"$context.authorizer.principalId\",\n",
                          "    \"caller\" : \"$context.identity.caller\",\n",
                          "    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\",\n",
                          "    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\",\n",
                          "    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\",\n",
                          "    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\",\n",
                          "    \"http-method\" : \"$context.httpMethod\",\n",
                          "    \"stage\" : \"$context.stage\",\n",
                          "    \"source-ip\" : \"$context.identity.sourceIp\",\n",
                          "    \"user\" : \"$context.identity.user\",\n",
                          "    \"user-agent\" : \"$context.identity.userAgent\",\n",
                          "    \"user-arn\" : \"$context.identity.userArn\",\n",
                          "    \"request-id\" : \"$context.requestId\",\n",
                          "    \"resource-id\" : \"$context.resourceId\",\n",
                          "    \"resource-path\" : \"$context.resourcePath\",\n",
                          "    \"allowed-ips\" : \"$stageVariables.allowedips\",\n",
                          "    \"api-secrets\" : \"$stageVariables.apisecrets\",\n",
                          "    \"key-bucket\" : \"",
                          {
                            "Ref": "KeyBucket"
                          },
                          "\",\n",
                          "    \"output-bucket\" : \"$stageVariables.outputbucket\",\n",
                          "    \"public-key\" : \"",
                          {
                            "Ref": "CreateSSHKey"
                          },
                          "\",\n",
                          "    \"raw-body\" : \"$util.escapeJavaScript($input.body)\"\n",
                          "    }\n",
                          "}"
                        ]
                      ]
                    }
                  }
                }
              }
            },
            "/zipdl": {
              "post": {
                "consumes": [
                  "application/json"
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "type": "aws",
                  "credentials": {
                    "Fn::GetAtt": [
                      "WebHookRole",
                      "Arn"
                    ]
                  },
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "requestParameters": {
                    "integration.request.header.X-Amz-Invocation-Type": "'Event'"
                  },
                  "passthroughBehavior": "when_no_templates",
                  "httpMethod": "POST",
                  "uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path//2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "ZipDlLambda",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  },
                  "requestTemplates": {
                    "application/json": {
                      "Fn::Join": [
                        "",
                        [
                          "#set($allParams = $input.params())\n",
                          "{\n",
                          "\"body-json\" : $input.json('$'),\n",
                          "\"params\" : {\n",
                          "#foreach($type in $allParams.keySet())\n",
                          "    #set($params = $allParams.get($type))\n",
                          "\"$type\" : {\n",
                          "    #foreach($paramName in $params.keySet())\n",
                          "    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n",
                          "        #if($foreach.hasNext),#end\n",
                          "    #end\n",
                          "}\n",
                          "    #if($foreach.hasNext),#end\n",
                          "#end\n",
                          "},\n",
                          "\"stage-variables\" : {\n",
                          "#foreach($key in $stageVariables.keySet())\n",
                          "\"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n",
                          "    #if($foreach.hasNext),#end\n",
                          "#end\n",
                          "},\n",
                          "\"context\" : {\n",
                          "    \"account-id\" : \"$context.identity.accountId\",\n",
                          "    \"api-id\" : \"$context.apiId\",\n",
                          "    \"api-key\" : \"$context.identity.apiKey\",\n",
                          "    \"authorizer-principal-id\" : \"$context.authorizer.principalId\",\n",
                          "    \"caller\" : \"$context.identity.caller\",\n",
                          "    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\",\n",
                          "    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\",\n",
                          "    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\",\n",
                          "    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\",\n",
                          "    \"http-method\" : \"$context.httpMethod\",\n",
                          "    \"stage\" : \"$context.stage\",\n",
                          "    \"source-ip\" : \"$context.identity.sourceIp\",\n",
                          "    \"user\" : \"$context.identity.user\",\n",
                          "    \"user-agent\" : \"$context.identity.userAgent\",\n",
                          "    \"user-arn\" : \"$context.identity.userArn\",\n",
                          "    \"request-id\" : \"$context.requestId\",\n",
                          "    \"resource-id\" : \"$context.resourceId\",\n",
                          "    \"resource-path\" : \"$context.resourcePath\",\n",
                          "    \"oauth-key\" : \"$stageVariables.oauthkey\",\n",
                          "    \"oauth-secret\" : \"$stageVariables.oauthsecret\",\n",
                          "    \"output-bucket\" : \"$stageVariables.outputbucket\",\n",
                          "    \"git-token\" : \"$stageVariables.gittoken\"\n",
                          "    }\n",
                          "}"
                        ]
                      ]
                    }
                  }
                }
              }
            }
          },
          "securityDefinitions": {
            "sigv4": {
              "type": "apiKey",
              "name": "Authorization",
              "in": "header",
              "x-amazon-apigateway-authtype": "awsSigv4"
            }
          },
          "definitions": {
            "Empty": {
              "type": "object"
            }
          }
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "ce3c7a69-b2b9-40c6-a077-85691720f6f3"
        }
      }
    },
    "WebHookApiDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "WebHookApi"
        },
        "StageName": "DummyStage"
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "cc28f7ca-e2fa-4b55-87dc-e21815d689b3"
        }
      }
    },
    "WebHookApiProdStage": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {
          "Ref": "WebHookApiDeployment"
        },
        "RestApiId": {
          "Ref": "WebHookApi"
        },
        "StageName": "Prod",
        "Variables": {
          "outputbucket": {
            "Ref": "OutputBucket"
          },
          "allowedips": {
            "Fn::If": [
              "UseAllowedIps",
              {
                "Ref": "AllowedIps"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          "apisecrets": {
            "Fn::If": [
              "UseApiSecret",
              {
                "Ref": "ApiSecret"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          "gittoken": {
            "Fn::If": [
              "UseGitToken",
              {
                "Ref": "GitToken"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          "oauthkey": {
            "Fn::If": [
              "UseOauthKey",
              {
                "Ref": "OauthKey"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          "oauthsecret": {
            "Fn::If": [
              "UseOauthSecret",
              {
                "Ref": "OauthSecret"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "1267a60b-2fe8-4388-8ebe-cf1bf1b1ebfb"
        }
      }
    }
  },
  "Outputs": {
    "PublicSSHKey": {
      "Value": {
        "Ref": "CreateSSHKey"
      }
    },
    "GitPullWebHookApi": {
      "Value": {
        "Fn::Join": [
          "",
          [
            " https://",
            {
              "Ref": "WebHookApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".amazonaws.com/",
            {
              "Ref": "WebHookApiProdStage"
            },
            "/gitpull"
          ]
        ]
      }
    },
    "ZipDownloadWebHookApi": {
      "Value": {
        "Fn::Join": [
          "",
          [
            " https://",
            {
              "Ref": "WebHookApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".amazonaws.com/",
            {
              "Ref": "WebHookApiProdStage"
            },
            "/zipdl"
          ]
        ]
      }
    },
    "OutputBucketName": {
      "Value": {
        "Ref": "OutputBucket"
      }
    }
  }
}
